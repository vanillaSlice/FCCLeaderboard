{"version":3,"sources":["components/freecodecamp_logo.svg","components/AppFooter.jsx","components/AppHeader.jsx","components/LeaderboardHeader.jsx","components/LeaderboardRow.jsx","components/Leaderboard.jsx","serviceWorker.js","index.js","components/App.jsx"],"names":["module","exports","__webpack_require__","p","AppFooter","react_default","a","createElement","className","Container","version","href","AppHeader","Navbar","NavbarBrand","src","logo","alt","title","LeaderboardHeader","LeaderboardRow","props","activity","number","posters","replies","topic","views","map","poster","key","id","avatar","username","height","width","toPosterImage","Leaderboard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","topics","users","getCamperData","bind","assertThisInitialized","topicToRow","_this2","axios","get","then","res","setState","data","topic_list","catch","error","window","console","index","_this3","user","find","u","user_id","concat","avatar_template","replace","components_LeaderboardRow","moment","last_posted_at","fromNow","posts_count","slug","_this4","Row","Col","Table","bordered","responsive","striped","components_LeaderboardHeader","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","AppElement","src_components_AppHeader","components_Leaderboard","components_AppFooter","rootElement","document","getElementById","render","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9ca60b6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/freecodecamp_logo.d1c23cc9.svg\";","import React from 'react';\nimport { Container } from 'reactstrap';\n\nimport { version } from '../../package.json';\n\nconst AppFooter = () => (\n  <footer className=\"AppFooter mb-3\">\n    <Container className=\"text-right text-muted\">\n      <small>\n        v\n        { version }\n        &nbsp;|&nbsp;\n        <a href=\"https://github.com/vanillaSlice/FCCLeaderboard\">GitHub</a>\n        &nbsp;| Made with ðŸŽ§ by&nbsp;\n        <a href=\"https://mikelowe.xyz\">Mike</a>\n      </small>\n    </Container>\n  </footer>\n);\n\nexport default AppFooter;\n","import React from 'react';\nimport { Container, Navbar, NavbarBrand } from 'reactstrap';\n\nimport logo from './freecodecamp_logo.svg';\n\nimport './AppHeader.scss';\n\nconst AppHeader = () => (\n  <Navbar className=\"AppHeader\">\n    <Container>\n      <NavbarBrand href=\"https://www.freecodecamp.org/\">\n        <img src={logo} alt=\"freeCodeCamp logo\" title=\"freeCodeCamp logo\" />\n      </NavbarBrand>\n    </Container>\n  </Navbar>\n);\n\nexport default AppHeader;\n","import React from 'react';\n\nconst LeaderboardHeader = () => (\n  <thead className=\"LeaderboardHeader\">\n    <tr>\n      <th className=\"number align-middle\">#</th>\n      <th className=\"topic align-middle\">Topic</th>\n      <th className=\"posters align-middle\">Posters</th>\n      <th className=\"replies align-middle\">Replies</th>\n      <th className=\"views align-middle\">Views</th>\n      <th className=\"activity align-middle\">Activity</th>\n    </tr>\n  </thead>\n);\n\nexport default LeaderboardHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction toPosterImage(poster) {\n  return (\n    <a className=\"poster\" key={poster.id} href={poster.href}>\n      <img\n        className=\"rounded-circle my-1 mr-1\"\n        src={poster.avatar}\n        alt={poster.username}\n        title={poster.username}\n        height=\"32\"\n        width=\"32\"\n      />\n    </a>\n  );\n}\n\nconst LeaderboardRow = (props) => {\n  const {\n    activity,\n    number,\n    posters,\n    replies,\n    topic,\n    views,\n  } = props;\n\n  return (\n    <tr className=\"LeaderboardRow\">\n      <td className=\"number align-middle\">{number}</td>\n      <td className=\"topic align-middle\"><a href={topic.href}>{topic.title}</a></td>\n      <td className=\"posters align-middle\">{posters.map(poster => toPosterImage(poster))}</td>\n      <td className=\"replies align-middle\">{replies}</td>\n      <td className=\"views align-middle\">{views}</td>\n      <td className=\"activity align-middle\">{activity}</td>\n    </tr>\n  );\n};\n\nLeaderboardRow.propTypes = {\n  activity: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  posters: PropTypes.arrayOf(PropTypes.shape({\n    avatar: PropTypes.string.isRequired,\n    href: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    username: PropTypes.string.isRequired,\n  })).isRequired,\n  replies: PropTypes.number.isRequired,\n  topic: PropTypes.shape({\n    href: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired,\n  views: PropTypes.number.isRequired,\n};\n\nexport default LeaderboardRow;\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport {\n  Col,\n  Container,\n  Row,\n  Table,\n} from 'reactstrap';\nimport moment from 'moment';\n\nimport LeaderboardHeader from './LeaderboardHeader';\nimport LeaderboardRow from './LeaderboardRow';\n\nconst FCC_LATEST_URL = 'https://cors-anywhere.herokuapp.com/https://www.freecodecamp.org/forum/latest.json';\n\nclass Leaderboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      topics: [],\n      users: [],\n    };\n\n    this.getCamperData = this.getCamperData.bind(this);\n    this.topicToRow = this.topicToRow.bind(this);\n  }\n\n  componentDidMount() {\n    this.getCamperData();\n  }\n\n  getCamperData() {\n    axios.get(FCC_LATEST_URL)\n      .then((res) => {\n        this.setState(() => ({\n          topics: res.data.topic_list.topics,\n          users: res.data.users,\n        }));\n      })\n      .catch(error => window.console.error(error));\n  }\n\n  topicToRow(topic, index) {\n    const posters = topic.posters.map((poster) => {\n      const { users } = this.state;\n      const user = users.find(u => u.id === poster.user_id);\n      return {\n        avatar: `https://www.freecodecamp.org${user.avatar_template}`.replace('{size}', '128'),\n        href: `https://www.freecodecamp.org/forum/u/${user.username}`,\n        id: user.id,\n        username: user.username,\n      };\n    });\n\n    return (\n      <LeaderboardRow\n        activity={moment(topic.last_posted_at).fromNow()}\n        key={index}\n        number={index + 1}\n        posters={posters}\n        replies={topic.posts_count - 1}\n        topic={{\n          title: topic.title,\n          href: `https://www.freecodecamp.org/forum/t/${topic.slug}/${topic.id}`,\n        }}\n        views={topic.views}\n      />\n    );\n  }\n\n  render() {\n    const { topics } = this.state;\n\n    return (\n      <Container className=\"Leaderboard mt-4 mb-2\">\n        <Row>\n          <Col>\n            <Table bordered responsive striped>\n              <LeaderboardHeader />\n              <tbody>{topics.map((topic, index) => this.topicToRow(topic, index))}</tbody>\n            </Table>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Leaderboard;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createElement } from 'react';\nimport { render } from 'react-dom';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport './index.scss';\n\nconst AppElement = createElement(App);\nconst rootElement = document.getElementById('root');\n\nrender(AppElement, rootElement);\n\nserviceWorker.register();\n","import React from 'react';\n\nimport AppFooter from './AppFooter';\nimport AppHeader from './AppHeader';\nimport Leaderboard from './Leaderboard';\n\nexport default () => (\n  <div className=\"App\">\n    <AppHeader />\n    <Leaderboard />\n    <AppFooter />\n  </div>\n);\n"],"sourceRoot":""}